/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface FolderPart2 extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefScheme.instance().getGraphClass().getVertexClass("FolderPart2");

	public int get_folderPart2ID();

	public void set_folderPart2ID(int _folderPart2ID);

	public orm2tg.tg.schema.preferredIdentifiers.FolderPart2 get_preferredIdentifiers();

	public void set_preferredIdentifiers(orm2tg.tg.schema.preferredIdentifiers.FolderPart2 _preferredIdentifiers);

	/**
	 * @return the next orm2tg.tg.schema.FolderPart2 vertex in the global vertex sequence
	 */
	public orm2tg.tg.schema.FolderPart2 getNextFolderPart2();

	/**
	 * @return the first edge of class FolderPart2Hasfolder at this vertex
	 */
	public orm2tg.tg.schema.FolderPart2Hasfolder getFirstFolderPart2HasfolderIncidence();

	/**
	 * @return the first edge of class FolderPart2Hasfolder at this vertex
	 * @param orientation the orientation of the edge
	 */
	public orm2tg.tg.schema.FolderPart2Hasfolder getFirstFolderPart2HasfolderIncidence(EdgeDirection orientation);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FolderPart2Hasfolder or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderPart2Hasfolder> getFolderPart2HasfolderIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FolderPart2Hasfolder.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<orm2tg.tg.schema.FolderPart2Hasfolder> getFolderPart2HasfolderIncidences(EdgeDirection direction);
}
