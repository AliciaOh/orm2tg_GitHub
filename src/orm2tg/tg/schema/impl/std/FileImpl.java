/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.exception.GraphIOException;
import de.uni_koblenz.jgralab.exception.NoSuchAttributeException;

import java.io.IOException;

public class FileImpl extends VertexImpl implements orm2tg.tg.schema.File, de.uni_koblenz.jgralab.Vertex {

	protected java.lang.String _fileNameCode;

	protected java.lang.String _folderPart1Name;

	protected int _folderPart2ID;

	protected orm2tg.tg.schema.preferredIdentifiers.File _preferredIdentifiers;

	public FileImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return orm2tg.tg.schema.File.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return orm2tg.tg.schema.File.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("fileNameCode")) return (T) get_fileNameCode();
		if (attributeName.equals("folderPart1Name")) return (T) get_folderPart1Name();
		if (attributeName.equals("folderPart2ID")) return (T) (java.lang.Integer) get_folderPart2ID();
		if (attributeName.equals("preferredIdentifiers")) return (T) get_preferredIdentifiers();
		throw new NoSuchAttributeException("File doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("fileNameCode")) {
			set_fileNameCode((java.lang.String) data);
			return;
		}
		if (attributeName.equals("folderPart1Name")) {
			set_folderPart1Name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("folderPart2ID")) {
			set_folderPart2ID((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("preferredIdentifiers")) {
			set_preferredIdentifiers((orm2tg.tg.schema.preferredIdentifiers.File) data);
			return;
		}
		throw new NoSuchAttributeException("File doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_fileNameCode() {
		return _fileNameCode;
	}

	public void set_fileNameCode(java.lang.String _fileNameCode) {
		graph.fireBeforeChangeAttribute(this, "fileNameCode", this._fileNameCode, _fileNameCode);
		Object oldValue = this._fileNameCode;
		this._fileNameCode = _fileNameCode;
		internalMarkAttributeAsSet(0, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "fileNameCode", oldValue, _fileNameCode);
	}

	public java.lang.String get_folderPart1Name() {
		return _folderPart1Name;
	}

	public void set_folderPart1Name(java.lang.String _folderPart1Name) {
		graph.fireBeforeChangeAttribute(this, "folderPart1Name", this._folderPart1Name, _folderPart1Name);
		Object oldValue = this._folderPart1Name;
		this._folderPart1Name = _folderPart1Name;
		internalMarkAttributeAsSet(1, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "folderPart1Name", oldValue, _folderPart1Name);
	}

	public int get_folderPart2ID() {
		return _folderPart2ID;
	}

	public void set_folderPart2ID(int _folderPart2ID) {
		graph.fireBeforeChangeAttribute(this, "folderPart2ID", this._folderPart2ID, _folderPart2ID);
		Object oldValue = this._folderPart2ID;
		this._folderPart2ID = _folderPart2ID;
		internalMarkAttributeAsSet(2, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "folderPart2ID", oldValue, _folderPart2ID);
	}

	public orm2tg.tg.schema.preferredIdentifiers.File get_preferredIdentifiers() {
		return _preferredIdentifiers;
	}

	public void set_preferredIdentifiers(orm2tg.tg.schema.preferredIdentifiers.File _preferredIdentifiers) {
		graph.fireBeforeChangeAttribute(this, "preferredIdentifiers", this._preferredIdentifiers, _preferredIdentifiers);
		Object oldValue = this._preferredIdentifiers;
		this._preferredIdentifiers = _preferredIdentifiers;
		internalMarkAttributeAsSet(3, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "preferredIdentifiers", oldValue, _preferredIdentifiers);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		{
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_fileNameCode = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_fileNameCode(_fileNameCode);}
		}
		{
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_folderPart1Name = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_folderPart1Name(_folderPart1Name);}
		}
		{
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_folderPart2ID = io.matchInteger();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_folderPart2ID(_folderPart2ID);}
		}
		{
			
			boolean attrIsSet = true;
			if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.LBR)) {
				_preferredIdentifiers = new orm2tg.tg.schema.preferredIdentifiers.File(io);
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.NULL_LITERAL)) {
				io.match();
				_preferredIdentifiers = null;
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				io.match();
				attrIsSet = false;
			} else {
				throw new GraphIOException("Read record: '(' or 'n' expected");
			}
			if (attrIsSet) {set_preferredIdentifiers(_preferredIdentifiers);}
		}
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("fileNameCode")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_fileNameCode = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_fileNameCode(_fileNameCode);}
			return;
		}
		if (attributeName.equals("folderPart1Name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_folderPart1Name = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_folderPart1Name(_folderPart1Name);}
			return;
		}
		if (attributeName.equals("folderPart2ID")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_folderPart2ID = io.matchInteger();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_folderPart2ID(_folderPart2ID);}
			return;
		}
		if (attributeName.equals("preferredIdentifiers")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			boolean attrIsSet = true;
			if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.LBR)) {
				_preferredIdentifiers = new orm2tg.tg.schema.preferredIdentifiers.File(io);
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.NULL_LITERAL)) {
				io.match();
				_preferredIdentifiers = null;
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				io.match();
				attrIsSet = false;
			} else {
				throw new GraphIOException("Read record: '(' or 'n' expected");
			}
			if (attrIsSet) {set_preferredIdentifiers(_preferredIdentifiers);}
			return;
		}
		throw new NoSuchAttributeException("File doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		if (isUnsetAttribute("fileNameCode")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			io.writeUtfString(_fileNameCode);
		}
		if (isUnsetAttribute("folderPart1Name")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			io.writeUtfString(_folderPart1Name);
		}
		if (isUnsetAttribute("folderPart2ID")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			io.writeInteger(_folderPart2ID);
		}
		if (isUnsetAttribute("preferredIdentifiers")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			if (_preferredIdentifiers != null) {
				_preferredIdentifiers.writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
		}
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("fileNameCode")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("fileNameCode")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				io.writeUtfString(_fileNameCode);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("folderPart1Name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("folderPart1Name")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				io.writeUtfString(_folderPart1Name);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("folderPart2ID")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("folderPart2ID")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				io.writeInteger(_folderPart2ID);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("preferredIdentifiers")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("preferredIdentifiers")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				if (_preferredIdentifiers != null) {
					_preferredIdentifiers.writeComponentValues(io);
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("File doesn't contain an attribute " + attributeName);
	}

	@Override
	public orm2tg.tg.schema.File getNextFile() {
		return (orm2tg.tg.schema.File)getNextVertex(orm2tg.tg.schema.File.VC);
	}

	@Override
	public orm2tg.tg.schema.FolderHasFile getFirstFolderHasFileIncidence() {
		return (orm2tg.tg.schema.FolderHasFile)getFirstIncidence(orm2tg.tg.schema.FolderHasFile.EC);
	}

	@Override
	public orm2tg.tg.schema.FolderHasFile getFirstFolderHasFileIncidence(EdgeDirection orientation) {
		return (orm2tg.tg.schema.FolderHasFile)getFirstIncidence(orm2tg.tg.schema.FolderHasFile.EC, orientation);
	}

	@Override
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence() {
		return (orm2tg.tg.schema.FileNameHasFile)getFirstIncidence(orm2tg.tg.schema.FileNameHasFile.EC);
	}

	@Override
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence(EdgeDirection orientation) {
		return (orm2tg.tg.schema.FileNameHasFile)getFirstIncidence(orm2tg.tg.schema.FileNameHasFile.EC, orientation);
	}

	@Override
	public Iterable<orm2tg.tg.schema.FolderHasFile> getFolderHasFileIncidences() {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FolderHasFile.EC);
	}
	
	@Override
	public Iterable<orm2tg.tg.schema.FolderHasFile> getFolderHasFileIncidences(EdgeDirection direction) {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FolderHasFile.EC, direction);
	}

	@Override
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences() {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FileNameHasFile.EC);
	}
	
	@Override
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences(EdgeDirection direction) {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FileNameHasFile.EC, direction);
	}
}
