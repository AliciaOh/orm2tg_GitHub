/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.exception.GraphIOException;
import de.uni_koblenz.jgralab.exception.NoSuchAttributeException;

import java.io.IOException;

public class FileNameImpl extends VertexImpl implements orm2tg.tg.schema.FileName, de.uni_koblenz.jgralab.Vertex {

	protected java.lang.String _fileNameCode;

	protected orm2tg.tg.schema.preferredIdentifiers.FileName _preferredIdentifiers;

	public FileNameImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return orm2tg.tg.schema.FileName.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return orm2tg.tg.schema.FileName.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("fileNameCode")) return (T) get_fileNameCode();
		if (attributeName.equals("preferredIdentifiers")) return (T) get_preferredIdentifiers();
		throw new NoSuchAttributeException("FileName doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("fileNameCode")) {
			set_fileNameCode((java.lang.String) data);
			return;
		}
		if (attributeName.equals("preferredIdentifiers")) {
			set_preferredIdentifiers((orm2tg.tg.schema.preferredIdentifiers.FileName) data);
			return;
		}
		throw new NoSuchAttributeException("FileName doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_fileNameCode() {
		return _fileNameCode;
	}

	public void set_fileNameCode(java.lang.String _fileNameCode) {
		graph.fireBeforeChangeAttribute(this, "fileNameCode", this._fileNameCode, _fileNameCode);
		Object oldValue = this._fileNameCode;
		this._fileNameCode = _fileNameCode;
		internalMarkAttributeAsSet(0, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "fileNameCode", oldValue, _fileNameCode);
	}

	public orm2tg.tg.schema.preferredIdentifiers.FileName get_preferredIdentifiers() {
		return _preferredIdentifiers;
	}

	public void set_preferredIdentifiers(orm2tg.tg.schema.preferredIdentifiers.FileName _preferredIdentifiers) {
		graph.fireBeforeChangeAttribute(this, "preferredIdentifiers", this._preferredIdentifiers, _preferredIdentifiers);
		Object oldValue = this._preferredIdentifiers;
		this._preferredIdentifiers = _preferredIdentifiers;
		internalMarkAttributeAsSet(1, true);
		graphModified();
		graph.fireAfterChangeAttribute(this, "preferredIdentifiers", oldValue, _preferredIdentifiers);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		{
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_fileNameCode = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_fileNameCode(_fileNameCode);}
		}
		{
			
			boolean attrIsSet = true;
			if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.LBR)) {
				_preferredIdentifiers = new orm2tg.tg.schema.preferredIdentifiers.FileName(io);
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.NULL_LITERAL)) {
				io.match();
				_preferredIdentifiers = null;
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				io.match();
				attrIsSet = false;
			} else {
				throw new GraphIOException("Read record: '(' or 'n' expected");
			}
			if (attrIsSet) {set_preferredIdentifiers(_preferredIdentifiers);}
		}
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("fileNameCode")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			boolean attrIsSet = true;
			if (!io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				_fileNameCode = io.matchUtfString();
			} else {
				io.match();
				attrIsSet = false;
			}
			if (attrIsSet) {set_fileNameCode(_fileNameCode);}
			return;
		}
		if (attributeName.equals("preferredIdentifiers")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			boolean attrIsSet = true;
			if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.LBR)) {
				_preferredIdentifiers = new orm2tg.tg.schema.preferredIdentifiers.FileName(io);
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.NULL_LITERAL)) {
				io.match();
				_preferredIdentifiers = null;
			} else if (io.isNextToken(de.uni_koblenz.jgralab.impl.TgLexer.Token.UNSET_LITERAL)) {
				io.match();
				attrIsSet = false;
			} else {
				throw new GraphIOException("Read record: '(' or 'n' expected");
			}
			if (attrIsSet) {set_preferredIdentifiers(_preferredIdentifiers);}
			return;
		}
		throw new NoSuchAttributeException("FileName doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		if (isUnsetAttribute("fileNameCode")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			io.writeUtfString(_fileNameCode);
		}
		if (isUnsetAttribute("preferredIdentifiers")) {
			io.writeIdentifier(GraphIO.UNSET_LITERAL);
		} else {
			if (_preferredIdentifiers != null) {
				_preferredIdentifiers.writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
		}
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("fileNameCode")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("fileNameCode")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				io.writeUtfString(_fileNameCode);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("preferredIdentifiers")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (isUnsetAttribute("preferredIdentifiers")) {
				io.writeIdentifier(GraphIO.UNSET_LITERAL);
			} else {
				if (_preferredIdentifiers != null) {
					_preferredIdentifiers.writeComponentValues(io);
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("FileName doesn't contain an attribute " + attributeName);
	}

	@Override
	public orm2tg.tg.schema.FileName getNextFileName() {
		return (orm2tg.tg.schema.FileName)getNextVertex(orm2tg.tg.schema.FileName.VC);
	}

	@Override
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence() {
		return (orm2tg.tg.schema.FileNameHasFile)getFirstIncidence(orm2tg.tg.schema.FileNameHasFile.EC);
	}

	@Override
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence(EdgeDirection orientation) {
		return (orm2tg.tg.schema.FileNameHasFile)getFirstIncidence(orm2tg.tg.schema.FileNameHasFile.EC, orientation);
	}

	@Override
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences() {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FileNameHasFile.EC);
	}
	
	@Override
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences(EdgeDirection direction) {
		return new IncidenceIterable<>(this, orm2tg.tg.schema.FileNameHasFile.EC, direction);
	}
}
