/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.exception.GraphIOException;
import de.uni_koblenz.jgralab.exception.NoSuchAttributeException;

import java.io.IOException;

public class UniquenessConstraint_nestedPrefRefSchemeGraphImpl extends GraphImpl implements de.uni_koblenz.jgralab.Graph, orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefSchemeGraph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public UniquenessConstraint_nestedPrefRefSchemeGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public UniquenessConstraint_nestedPrefRefSchemeGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public UniquenessConstraint_nestedPrefRefSchemeGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefSchemeGraph.GC, vMax, eMax);
		((de.uni_koblenz.jgralab.impl.InternalAttributedElement) this).internalInitializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public UniquenessConstraint_nestedPrefRefSchemeGraphImpl(java.lang.String id) {
		super(id, orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefSchemeGraph.GC);
		((de.uni_koblenz.jgralab.impl.InternalAttributedElement) this).internalInitializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefSchemeGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefSchemeGraph.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("UniquenessConstraint_nestedPrefRefSchemeGraph doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("UniquenessConstraint_nestedPrefRefSchemeGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("UniquenessConstraint_nestedPrefRefSchemeGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("UniquenessConstraint_nestedPrefRefSchemeGraph doesn't contain an attribute " + attributeName);
	}

	// ------------------------ Code for File ------------------------

	public orm2tg.tg.schema.File getFirstFile() {
		return (orm2tg.tg.schema.File)getFirstVertex(orm2tg.tg.schema.File.VC);
	}

	public orm2tg.tg.schema.File createFile() {
		return graphFactory.<orm2tg.tg.schema.File> createVertex(orm2tg.tg.schema.File.VC, 0, this);
	}

	public orm2tg.tg.schema.File createFile(int id) {
		return graphFactory.<orm2tg.tg.schema.File> createVertex(orm2tg.tg.schema.File.VC, id, this);
	}

	// ------------------------ Code for FileName ------------------------

	public orm2tg.tg.schema.FileName getFirstFileName() {
		return (orm2tg.tg.schema.FileName)getFirstVertex(orm2tg.tg.schema.FileName.VC);
	}

	public orm2tg.tg.schema.FileName createFileName() {
		return graphFactory.<orm2tg.tg.schema.FileName> createVertex(orm2tg.tg.schema.FileName.VC, 0, this);
	}

	public orm2tg.tg.schema.FileName createFileName(int id) {
		return graphFactory.<orm2tg.tg.schema.FileName> createVertex(orm2tg.tg.schema.FileName.VC, id, this);
	}

	// ------------------------ Code for FileNameHasFile ------------------------

	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFile() {
		return (orm2tg.tg.schema.FileNameHasFile)getFirstEdge(orm2tg.tg.schema.FileNameHasFile.EC);
	}

	public orm2tg.tg.schema.FileNameHasFile createFileNameHasFile(orm2tg.tg.schema.FileName alpha, orm2tg.tg.schema.File omega) {
		return graphFactory.<orm2tg.tg.schema.FileNameHasFile> createEdge(orm2tg.tg.schema.FileNameHasFile.EC, 0, this, alpha, omega);
	}

	public orm2tg.tg.schema.FileNameHasFile createFileNameHasFile(int id, orm2tg.tg.schema.FileName alpha, orm2tg.tg.schema.File omega) {
		return graphFactory.<orm2tg.tg.schema.FileNameHasFile> createEdge(orm2tg.tg.schema.FileNameHasFile.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Folder ------------------------

	public orm2tg.tg.schema.Folder getFirstFolder() {
		return (orm2tg.tg.schema.Folder)getFirstVertex(orm2tg.tg.schema.Folder.VC);
	}

	public orm2tg.tg.schema.Folder createFolder() {
		return graphFactory.<orm2tg.tg.schema.Folder> createVertex(orm2tg.tg.schema.Folder.VC, 0, this);
	}

	public orm2tg.tg.schema.Folder createFolder(int id) {
		return graphFactory.<orm2tg.tg.schema.Folder> createVertex(orm2tg.tg.schema.Folder.VC, id, this);
	}

	// ------------------------ Code for FolderHasFile ------------------------

	public orm2tg.tg.schema.FolderHasFile getFirstFolderHasFile() {
		return (orm2tg.tg.schema.FolderHasFile)getFirstEdge(orm2tg.tg.schema.FolderHasFile.EC);
	}

	public orm2tg.tg.schema.FolderHasFile createFolderHasFile(orm2tg.tg.schema.Folder alpha, orm2tg.tg.schema.File omega) {
		return graphFactory.<orm2tg.tg.schema.FolderHasFile> createEdge(orm2tg.tg.schema.FolderHasFile.EC, 0, this, alpha, omega);
	}

	public orm2tg.tg.schema.FolderHasFile createFolderHasFile(int id, orm2tg.tg.schema.Folder alpha, orm2tg.tg.schema.File omega) {
		return graphFactory.<orm2tg.tg.schema.FolderHasFile> createEdge(orm2tg.tg.schema.FolderHasFile.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for FolderPart1 ------------------------

	public orm2tg.tg.schema.FolderPart1 getFirstFolderPart1() {
		return (orm2tg.tg.schema.FolderPart1)getFirstVertex(orm2tg.tg.schema.FolderPart1.VC);
	}

	public orm2tg.tg.schema.FolderPart1 createFolderPart1() {
		return graphFactory.<orm2tg.tg.schema.FolderPart1> createVertex(orm2tg.tg.schema.FolderPart1.VC, 0, this);
	}

	public orm2tg.tg.schema.FolderPart1 createFolderPart1(int id) {
		return graphFactory.<orm2tg.tg.schema.FolderPart1> createVertex(orm2tg.tg.schema.FolderPart1.VC, id, this);
	}

	// ------------------------ Code for FolderPart1HasFolder ------------------------

	public orm2tg.tg.schema.FolderPart1HasFolder getFirstFolderPart1HasFolder() {
		return (orm2tg.tg.schema.FolderPart1HasFolder)getFirstEdge(orm2tg.tg.schema.FolderPart1HasFolder.EC);
	}

	public orm2tg.tg.schema.FolderPart1HasFolder createFolderPart1HasFolder(orm2tg.tg.schema.FolderPart1 alpha, orm2tg.tg.schema.Folder omega) {
		return graphFactory.<orm2tg.tg.schema.FolderPart1HasFolder> createEdge(orm2tg.tg.schema.FolderPart1HasFolder.EC, 0, this, alpha, omega);
	}

	public orm2tg.tg.schema.FolderPart1HasFolder createFolderPart1HasFolder(int id, orm2tg.tg.schema.FolderPart1 alpha, orm2tg.tg.schema.Folder omega) {
		return graphFactory.<orm2tg.tg.schema.FolderPart1HasFolder> createEdge(orm2tg.tg.schema.FolderPart1HasFolder.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for FolderPart2 ------------------------

	public orm2tg.tg.schema.FolderPart2 getFirstFolderPart2() {
		return (orm2tg.tg.schema.FolderPart2)getFirstVertex(orm2tg.tg.schema.FolderPart2.VC);
	}

	public orm2tg.tg.schema.FolderPart2 createFolderPart2() {
		return graphFactory.<orm2tg.tg.schema.FolderPart2> createVertex(orm2tg.tg.schema.FolderPart2.VC, 0, this);
	}

	public orm2tg.tg.schema.FolderPart2 createFolderPart2(int id) {
		return graphFactory.<orm2tg.tg.schema.FolderPart2> createVertex(orm2tg.tg.schema.FolderPart2.VC, id, this);
	}

	// ------------------------ Code for FolderPart2Hasfolder ------------------------

	public orm2tg.tg.schema.FolderPart2Hasfolder getFirstFolderPart2Hasfolder() {
		return (orm2tg.tg.schema.FolderPart2Hasfolder)getFirstEdge(orm2tg.tg.schema.FolderPart2Hasfolder.EC);
	}

	public orm2tg.tg.schema.FolderPart2Hasfolder createFolderPart2Hasfolder(orm2tg.tg.schema.FolderPart2 alpha, orm2tg.tg.schema.Folder omega) {
		return graphFactory.<orm2tg.tg.schema.FolderPart2Hasfolder> createEdge(orm2tg.tg.schema.FolderPart2Hasfolder.EC, 0, this, alpha, omega);
	}

	public orm2tg.tg.schema.FolderPart2Hasfolder createFolderPart2Hasfolder(int id, orm2tg.tg.schema.FolderPart2 alpha, orm2tg.tg.schema.Folder omega) {
		return graphFactory.<orm2tg.tg.schema.FolderPart2Hasfolder> createEdge(orm2tg.tg.schema.FolderPart2Hasfolder.EC, id, this, alpha, omega);
	}

	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileEdges() {
		return new EdgeIterable<>(this, orm2tg.tg.schema.FileNameHasFile.EC);
	}
	

	public Iterable<orm2tg.tg.schema.FolderHasFile> getFolderHasFileEdges() {
		return new EdgeIterable<>(this, orm2tg.tg.schema.FolderHasFile.EC);
	}
	

	public Iterable<orm2tg.tg.schema.FolderPart1HasFolder> getFolderPart1HasFolderEdges() {
		return new EdgeIterable<>(this, orm2tg.tg.schema.FolderPart1HasFolder.EC);
	}
	

	public Iterable<orm2tg.tg.schema.FolderPart2Hasfolder> getFolderPart2HasfolderEdges() {
		return new EdgeIterable<>(this, orm2tg.tg.schema.FolderPart2Hasfolder.EC);
	}
	

	public Iterable<orm2tg.tg.schema.FileName> getFileNameVertices() {
		return new VertexIterable<>(this, orm2tg.tg.schema.FileName.VC, null);
	}
	
	public Iterable<orm2tg.tg.schema.FileName> getFileNameVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FileName> filter) {
		return new VertexIterable<>(this, orm2tg.tg.schema.FileName.VC, filter);
	}
	

	public Iterable<orm2tg.tg.schema.FolderPart2> getFolderPart2Vertices() {
		return new VertexIterable<>(this, orm2tg.tg.schema.FolderPart2.VC, null);
	}
	
	public Iterable<orm2tg.tg.schema.FolderPart2> getFolderPart2Vertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FolderPart2> filter) {
		return new VertexIterable<>(this, orm2tg.tg.schema.FolderPart2.VC, filter);
	}
	

	public Iterable<orm2tg.tg.schema.FolderPart1> getFolderPart1Vertices() {
		return new VertexIterable<>(this, orm2tg.tg.schema.FolderPart1.VC, null);
	}
	
	public Iterable<orm2tg.tg.schema.FolderPart1> getFolderPart1Vertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FolderPart1> filter) {
		return new VertexIterable<>(this, orm2tg.tg.schema.FolderPart1.VC, filter);
	}
	

	public Iterable<orm2tg.tg.schema.Folder> getFolderVertices() {
		return new VertexIterable<>(this, orm2tg.tg.schema.Folder.VC, null);
	}
	
	public Iterable<orm2tg.tg.schema.Folder> getFolderVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.Folder> filter) {
		return new VertexIterable<>(this, orm2tg.tg.schema.Folder.VC, filter);
	}
	

	public Iterable<orm2tg.tg.schema.File> getFileVertices() {
		return new VertexIterable<>(this, orm2tg.tg.schema.File.VC, null);
	}
	
	public Iterable<orm2tg.tg.schema.File> getFileVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.File> filter) {
		return new VertexIterable<>(this, orm2tg.tg.schema.File.VC, filter);
	}
	
}
