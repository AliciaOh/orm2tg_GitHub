/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface FileName extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefScheme.instance().getGraphClass().getVertexClass("FileName");

	public java.lang.String get_fileNameCode();

	public void set_fileNameCode(java.lang.String _fileNameCode);

	public orm2tg.tg.schema.preferredIdentifiers.FileName get_preferredIdentifiers();

	public void set_preferredIdentifiers(orm2tg.tg.schema.preferredIdentifiers.FileName _preferredIdentifiers);

	/**
	 * @return the next orm2tg.tg.schema.FileName vertex in the global vertex sequence
	 */
	public orm2tg.tg.schema.FileName getNextFileName();

	/**
	 * @return the first edge of class FileNameHasFile at this vertex
	 */
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence();

	/**
	 * @return the first edge of class FileNameHasFile at this vertex
	 * @param orientation the orientation of the edge
	 */
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFileIncidence(EdgeDirection orientation);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FileNameHasFile or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FileNameHasFile.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileIncidences(EdgeDirection direction);
}
