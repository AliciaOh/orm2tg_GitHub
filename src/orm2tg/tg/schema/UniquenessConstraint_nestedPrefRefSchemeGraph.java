/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package orm2tg.tg.schema;

public interface UniquenessConstraint_nestedPrefRefSchemeGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = orm2tg.tg.schema.UniquenessConstraint_nestedPrefRefScheme.instance().getGraphClass();

	// ------------------------ Code for File ------------------------

	/**
	 * @return the first File vertex in this graph
	 */
	public orm2tg.tg.schema.File getFirstFile();

	/**
	 * Creates a new File vertex in this graph.
	 *
	*/
	public orm2tg.tg.schema.File createFile();

	// ------------------------ Code for FileName ------------------------

	/**
	 * @return the first FileName vertex in this graph
	 */
	public orm2tg.tg.schema.FileName getFirstFileName();

	/**
	 * Creates a new FileName vertex in this graph.
	 *
	*/
	public orm2tg.tg.schema.FileName createFileName();

	// ------------------------ Code for FileNameHasFile ------------------------

	/**
	 * @return the first FileNameHasFile edge in this graph
	 */
	public orm2tg.tg.schema.FileNameHasFile getFirstFileNameHasFile();

	/**
	 * Creates a new FileNameHasFile edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public orm2tg.tg.schema.FileNameHasFile createFileNameHasFile(orm2tg.tg.schema.FileName alpha, orm2tg.tg.schema.File omega);

	// ------------------------ Code for Folder ------------------------

	/**
	 * @return the first Folder vertex in this graph
	 */
	public orm2tg.tg.schema.Folder getFirstFolder();

	/**
	 * Creates a new Folder vertex in this graph.
	 *
	*/
	public orm2tg.tg.schema.Folder createFolder();

	// ------------------------ Code for FolderHasFile ------------------------

	/**
	 * @return the first FolderHasFile edge in this graph
	 */
	public orm2tg.tg.schema.FolderHasFile getFirstFolderHasFile();

	/**
	 * Creates a new FolderHasFile edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public orm2tg.tg.schema.FolderHasFile createFolderHasFile(orm2tg.tg.schema.Folder alpha, orm2tg.tg.schema.File omega);

	// ------------------------ Code for FolderPart1 ------------------------

	/**
	 * @return the first FolderPart1 vertex in this graph
	 */
	public orm2tg.tg.schema.FolderPart1 getFirstFolderPart1();

	/**
	 * Creates a new FolderPart1 vertex in this graph.
	 *
	*/
	public orm2tg.tg.schema.FolderPart1 createFolderPart1();

	// ------------------------ Code for FolderPart1HasFolder ------------------------

	/**
	 * @return the first FolderPart1HasFolder edge in this graph
	 */
	public orm2tg.tg.schema.FolderPart1HasFolder getFirstFolderPart1HasFolder();

	/**
	 * Creates a new FolderPart1HasFolder edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public orm2tg.tg.schema.FolderPart1HasFolder createFolderPart1HasFolder(orm2tg.tg.schema.FolderPart1 alpha, orm2tg.tg.schema.Folder omega);

	// ------------------------ Code for FolderPart2 ------------------------

	/**
	 * @return the first FolderPart2 vertex in this graph
	 */
	public orm2tg.tg.schema.FolderPart2 getFirstFolderPart2();

	/**
	 * Creates a new FolderPart2 vertex in this graph.
	 *
	*/
	public orm2tg.tg.schema.FolderPart2 createFolderPart2();

	// ------------------------ Code for FolderPart2Hasfolder ------------------------

	/**
	 * @return the first FolderPart2Hasfolder edge in this graph
	 */
	public orm2tg.tg.schema.FolderPart2Hasfolder getFirstFolderPart2Hasfolder();

	/**
	 * Creates a new FolderPart2Hasfolder edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public orm2tg.tg.schema.FolderPart2Hasfolder createFolderPart2Hasfolder(orm2tg.tg.schema.FolderPart2 alpha, orm2tg.tg.schema.Folder omega);

	/**
	 * @return an Iterable for all edges of this graph that are of type FileNameHasFile or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FileNameHasFile> getFileNameHasFileEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FolderHasFile or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderHasFile> getFolderHasFileEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FolderPart1HasFolder or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderPart1HasFolder> getFolderPart1HasFolderEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FolderPart2Hasfolder or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderPart2Hasfolder> getFolderPart2HasfolderEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FileName or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FileName> getFileNameVertices();
	
	public Iterable<orm2tg.tg.schema.FileName> getFileNameVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FileName> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FolderPart2 or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderPart2> getFolderPart2Vertices();
	
	public Iterable<orm2tg.tg.schema.FolderPart2> getFolderPart2Vertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FolderPart2> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FolderPart1 or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.FolderPart1> getFolderPart1Vertices();
	
	public Iterable<orm2tg.tg.schema.FolderPart1> getFolderPart1Vertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.FolderPart1> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Folder or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.Folder> getFolderVertices();
	
	public Iterable<orm2tg.tg.schema.Folder> getFolderVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.Folder> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type File or subtypes.
	 */
	public Iterable<orm2tg.tg.schema.File> getFileVertices();
	
	public Iterable<orm2tg.tg.schema.File> getFileVertices(de.uni_koblenz.jgralab.VertexFilter<orm2tg.tg.schema.File> filter);
	
}
